// This file is automatically generated, do not edit
goog.provide('{{namespace}}');

goog.require('ol.webgl.shader');



/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @struct
 */
{{className}}FragmentColors = function() {
  goog.base(this, {{className}}FragmentColors.SOURCE);
};
goog.inherits({{className}}FragmentColors, ol.webgl.shader.Fragment);
goog.addSingletonGetter({{className}}FragmentColors);


/**
 * @const
 * @type {string}
 */
{{className}}FragmentColors.DEBUG_SOURCE = 'precision highp float;\n{{{getOriginalFragmentColorsSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}FragmentColors.OPTIMIZED_SOURCE = 'precision highp float;{{{getFragmentColorsSource}}}';

/**
 * @const
 * @type {string}
 */
{{className}}FragmentColors.SOURCE = goog.DEBUG ?
    {{className}}FragmentColors.DEBUG_SOURCE :
    {{className}}FragmentColors.OPTIMIZED_SOURCE;


/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @struct
 */
{{className}}FragmentOverlay = function() {
  goog.base(this, {{className}}FragmentOverlay.SOURCE);
};
goog.inherits({{className}}FragmentOverlay, ol.webgl.shader.Fragment);
goog.addSingletonGetter({{className}}FragmentOverlay);


/**
 * @const
 * @type {string}
 */
{{className}}FragmentOverlay.DEBUG_SOURCE = 'precision highp float;\n{{{getOriginalFragmentOverlaySource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}FragmentOverlay.OPTIMIZED_SOURCE = 'precision highp float;{{{getFragmentOverlaySource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}FragmentOverlay.SOURCE = goog.DEBUG ?
    {{className}}FragmentOverlay.DEBUG_SOURCE :
    {{className}}FragmentOverlay.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @struct
 */
{{className}}FragmentHybrid = function() {
  goog.base(this, {{className}}FragmentHybrid.SOURCE);
};
goog.inherits({{className}}FragmentHybrid, ol.webgl.shader.Fragment);
goog.addSingletonGetter({{className}}FragmentHybrid);


/**
 * @const
 * @type {string}
 */
{{className}}FragmentHybrid.DEBUG_SOURCE = 'precision highp float;\n{{{getOriginalFragmentHybridSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}FragmentHybrid.OPTIMIZED_SOURCE = 'precision highp float;{{{getFragmentHybridSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}FragmentHybrid.SOURCE = goog.DEBUG ?
    {{className}}FragmentHybrid.DEBUG_SOURCE :
    {{className}}FragmentHybrid.OPTIMIZED_SOURCE;


/**
 * @constructor
 * @extends {ol.webgl.shader.Vertex}
 * @struct
 */
{{className}}Vertex = function() {
  goog.base(this, {{className}}Vertex.SOURCE);
};
goog.inherits({{className}}Vertex, ol.webgl.shader.Vertex);
goog.addSingletonGetter({{className}}Vertex);


/**
 * @const
 * @type {string}
 */
{{className}}Vertex.DEBUG_SOURCE = 'precision highp float;{{{getOriginalVertexSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}Vertex.OPTIMIZED_SOURCE = 'precision highp float;{{{getVertexSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}Vertex.SOURCE = goog.DEBUG ?
    {{className}}Vertex.DEBUG_SOURCE :
    {{className}}Vertex.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
{{namespace}}.Locations = function(gl, program) {
{{#getUniforms}}

  /**
   * @type {WebGLUniformLocation}
   */
  this.{{originalName}} = gl.getUniformLocation(
      program, goog.DEBUG ? '{{originalName}}' : '{{shortName}}');
{{/getUniforms}}
{{#getAttributes}}

  /**
   * @type {number}
   */
  this.{{originalName}} = gl.getAttribLocation(
      program, goog.DEBUG ? '{{originalName}}' : '{{shortName}}');
{{/getAttributes}}
};
