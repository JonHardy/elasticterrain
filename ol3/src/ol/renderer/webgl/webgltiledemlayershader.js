// This file is automatically generated, do not edit
goog.provide('ol.renderer.webgl.tiledemlayer.shader');

goog.require('ol.webgl.shader');



/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @struct
 */
ol.renderer.webgl.tiledemlayer.shader.Fragment = function() {
  goog.base(this, ol.renderer.webgl.tiledemlayer.shader.Fragment.SOURCE);
};
goog.inherits(ol.renderer.webgl.tiledemlayer.shader.Fragment, ol.webgl.shader.Fragment);
goog.addSingletonGetter(ol.renderer.webgl.tiledemlayer.shader.Fragment);


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tiledemlayer.shader.Fragment.DEBUG_SOURCE = 'precision highp float;\n\n// texture with encoded elevation values\nuniform sampler2D u_texture;\n\n// length of one tile in meter at equator\nuniform float u_tileSizeM;\n\n// temporary variable for coord transfer to fragment shader\nvarying vec2 v_texCoord;\n\n// decodes input data elevation value and apply exaggeration\nfloat decodeElevation(in vec4 colorChannels, in float exaggeration) {\n    float elevationM = ((colorChannels.r*255.0 + (colorChannels.g*255.0)*256.0)-11000.0)/(10.0*exaggeration);\n    return elevationM;\n}\n\n\n// color ramp texture to look up hypsometric tints\nuniform sampler2D u_colorRamp;\n\n// texture with overlay map\nuniform sampler2D u_overlayTexture;\n\n// flag for coloring inland waterbodies\nuniform bool u_waterBodies; \n\n// flag for hillShading\nuniform bool u_hillShading; \n\n// flag for active overlay texture\nuniform bool u_overlayActive;\n\n// flag for testing mode\nuniform bool u_testing;    \n\n// scale threshold values to adapt color ramp \n// u_colorScale.x is lower threshold, u_colorScale.y is upper threshold\nuniform vec2 u_colorScale;\n\n// direction of light source\nuniform vec3 u_light; \n\n// hillShading Opacity for Blending\nuniform float u_hillShadingOpacity; \n\n// hillShading Exaggeration\nuniform float u_hsExaggeration; \n\n// intensity of ambient light\nuniform float u_ambient_light; \n\n// min Elevation in current Extent\nuniform float u_minElevation; \n\n// max Elevation in current Extent\nuniform float u_maxElevation;     \n\n// assumed to be the highest elevation in the model\nconst float MAX_ELEVATION = 9000.0; \n\n// cellsize for tile resolution of 256x256 pixel = 1.0/256.0\nconst highp float CELLSIZE = 0.00390625; \n\nvoid main(void) {\n  \n    // read elevations from current cell and neighbours\n        vec2 m_texCoord = v_texCoord;\n        float exaggerationFactor = 1.0-u_hsExaggeration;\n\n        // read and decode elevation values from tile texture\n        float absElevation = decodeElevation(texture2D(u_texture, m_texCoord.xy),1.0);\n\n        // read and decode exaggerated elevation values from tile texture\n        float absElevationEx = decodeElevation(texture2D(u_texture, m_texCoord.xy),exaggerationFactor);\n\n        // compute neighbouring vertices\n            vec3 neighbourRight = vec3(m_texCoord.x+CELLSIZE, 1.0 - m_texCoord.y,0.0);\n            vec3 neighbourAbove = vec3(m_texCoord.x, 1.0 - m_texCoord.y+CELLSIZE,0.0);  \n\n            neighbourRight.z = decodeElevation(texture2D(u_texture, vec2(m_texCoord.x+CELLSIZE, m_texCoord.y)),exaggerationFactor);\n            neighbourAbove.z = decodeElevation(texture2D(u_texture, vec2(m_texCoord.x, m_texCoord.y-CELLSIZE)),exaggerationFactor);\n\n            // hack to avoid artifacts in tile borders\n                if(m_texCoord.x >= 1.0-CELLSIZE){ // eastern border of tile\n                    // use neighbour LEFT\n                    neighbourRight = vec3(m_texCoord.x-CELLSIZE, 1.0 - m_texCoord.y,0.0);\n                    neighbourRight.z = decodeElevation(texture2D(u_texture, vec2(m_texCoord.x-CELLSIZE, m_texCoord.y)),exaggerationFactor);\n                }\n\n                if(m_texCoord.y <= CELLSIZE){ // northern border of tile\n                    // use neighbour BELOW\n                    neighbourAbove = vec3(m_texCoord.x, 1.0 - (m_texCoord.y+CELLSIZE),0.0);\n                    neighbourAbove.z = decodeElevation(texture2D(u_texture, vec2(m_texCoord.x, m_texCoord.y+CELLSIZE)),exaggerationFactor);\n                }\n          \n    // texture\n        vec4 fragColor;\n        if(u_overlayActive){\n             // use overlay color\n             fragColor = texture2D(u_overlayTexture, m_texCoord);\n        } else {\n            // computation of hypsometric color\n                \n                // scaling of color ramp\n                float elevationRange = u_maxElevation-u_minElevation;\n                float colorMin = u_colorScale.x/elevationRange;\n                float colorMax = u_colorScale.y/elevationRange;             \n                float relativeElevation = ((absElevation/elevationRange) - colorMin) / (colorMax - colorMin);\n                \n                // read corresponding value from color ramp texture\n                fragColor = abs(texture2D(u_colorRamp,vec2(0.5,relativeElevation)));\n\n                // color for water surfaces in flat terrain\n                if(neighbourRight.z == absElevationEx && neighbourAbove.z == absElevationEx){\n                    \n                    // sealevel (0.0m) or below (i.e. negative no data values)\n                    if(absElevation <= 0.0){\n                        fragColor = vec4(0.5058823529,0.7725490196,0.8470588235,1.0);   // set color to blue\n\n                    // if not on sea-level and inland waterBody flag is true    \n                    } else if(u_waterBodies) {\n\n                        // doublecheck if this pixel really belongs to a larger surface with help of remaining two neighbours\n                        //vec3 neighbourAbove = vec3(v_texCoord.x,v_texCoord.y-CELLSIZE/2.0,0.0);  \n                        //vec3 neighbourLeft = vec3(v_texCoord.x+CELLSIZE/2.0,v_texCoord.y,0.0);  \n                        //if(decodeElevation(texture2D(u_texture, neighbourAbove.xy)) == absElevation && decodeElevation(texture2D(u_texture, neighbourLeft.xy)) == absElevation){\n                            fragColor = vec4(0.5058823529,0.7725490196,0.8470588235,1.0);   // set color to blue\n                        //}\n                    }\n                } \n        }\n\n    // computation of hillshading\n        if(u_hillShading){\n            // transform to meter coordinates for normal computation\n            vec3 currentV = vec3(m_texCoord.x*u_tileSizeM,(1.0 - m_texCoord.y)*u_tileSizeM,absElevationEx);\n            neighbourRight.xy *= u_tileSizeM;\n            neighbourAbove.xy *= u_tileSizeM;\n\n            // normal computation\n            vec3 normal = normalize(cross(neighbourRight-currentV,neighbourAbove-currentV));\n\n            if(m_texCoord.x >= 1.0-CELLSIZE){ // eastern border of tile\n                 normal = normalize(cross(currentV-neighbourRight,neighbourAbove-currentV));\n            }\n\n            if(m_texCoord.y <= CELLSIZE){ // northern border of tile\n                 normal = normalize(cross(currentV-neighbourRight,neighbourAbove-currentV));\n            }\n\n            // compute hillShade with help of u_light and normal and blend hypsocolor with hillShade\n            float hillShade = clamp(u_ambient_light * 1.0+ max(dot(normal,normalize(u_light)),0.0),1.0-u_hillShadingOpacity,1.0);\n            vec4 hillShadeC = vec4(hillShade,hillShade,hillShade,1.0);\n\n\n            // float hillShadeD = clamp(hillShade,0.2,1.0);\n            // vec4 hillShadeA = vec4(hillShadeD,hillShadeD,hillShadeD,1.0);\n\n            // float hillShadeL = clamp(hillShade,0.1,0.4);\n            // vec4 hillShadeB = vec4(hillShadeL,hillShadeL,hillShadeL,1.0);\n     \n            // vec4 zero = vec4(0,0,0,0);\n            // vec4 one = vec4(1.0,1.0,1.0,1.0);\n            // vec4 two = vec4(2.0,2.0,2.0,2.0);\n\n            //https://en.wikipedia.org/wiki/Blend_modes\n\n            //overlay mixing\n            // if(hillShade < 0.5){\n            //     gl_FragColor = two * hillShadeC * fragColor;\n            // } else {\n            //     gl_FragColor = one-two*(one-hillShadeC)*(one-fragColor);\n            // }\n\n            // hard light mixing\n            // if(fragColor.x < 0.5 || fragColor.y < 0.5 || fragColor.z < 0.5){\n            //     gl_FragColor = two * fragColor * hillShadeC;\n            // } else {\n            //     gl_FragColor = one-two*(one-fragColor)*(one-hillShadeC);\n            // }\n           \n            //screen\n            // gl_FragColor = one-(one-hillShadeC)*(one-fragColor);\n\n            // multiply mixing\n            // gl_FragColor = (fragColor * hillShadeA)*(one-(one-hillShadeB)*(one-fragColor));\n            // gl_FragColor = (one-(one-hillShadeB)*(one-hillShadeA))*fragColor;\n\n\n            gl_FragColor = hillShadeC*fragColor;\n\n        } else {\n            // apply hypsometric color without hillshading\n            gl_FragColor = fragColor;\n        }\n\n    // testing mode\n        if(u_testing){\n            float lineWidth = 3.0 * CELLSIZE;\n            if(m_texCoord.x >= 1.0-lineWidth){\n                gl_FragColor = vec4(0.0,0.0,1.0,1.0);\n            }\n            if(m_texCoord.x <= lineWidth){\n                gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n            }\n            if(m_texCoord.y <= lineWidth){\n                gl_FragColor = vec4(0.0,1.0,0.0,1.0);\n            }\n            if(m_texCoord.y >= 1.0-lineWidth){\n                gl_FragColor = vec4(0.0,0.5,0.5,1.0);\n            } \n            if(mod(m_texCoord.x,65.0*CELLSIZE) < CELLSIZE){\n               gl_FragColor = vec4(0.9,0.9,0.9,0.1);\n            }\n            if(mod(m_texCoord.y,65.0*CELLSIZE) < CELLSIZE){\n               gl_FragColor = vec4(0.9,0.9,0.9,0.1);\n            }\n        }\n}\n';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tiledemlayer.shader.Fragment.OPTIMIZED_SOURCE = 'precision highp float;uniform sampler2D a;uniform float b;varying vec2 c;float decodeElevation(in vec4 colorChannels,in float exaggeration){float elevationM=((colorChannels.r*255.0+(colorChannels.g*255.0)*256.0)-11000.0)/(10.0*exaggeration);return elevationM;}uniform sampler2D g;uniform sampler2D h;uniform bool i;uniform bool j;uniform bool k;uniform bool l;uniform vec2 m;uniform vec3 n;uniform float o;uniform float p;uniform float q;uniform float r;uniform float s;const float MAX_ELEVATION=9000.0;const highp float CELLSIZE=0.00390625;void main(void){vec2 m_texCoord=c;float exaggerationFactor=1.0-p;float absElevation=decodeElevation(texture2D(a,m_texCoord.xy),1.0);float absElevationEx=decodeElevation(texture2D(a,m_texCoord.xy),exaggerationFactor);vec3 neighbourRight=vec3(m_texCoord.x+CELLSIZE,1.0-m_texCoord.y,0.0);vec3 neighbourAbove=vec3(m_texCoord.x,1.0-m_texCoord.y+CELLSIZE,0.0);neighbourRight.z=decodeElevation(texture2D(a,vec2(m_texCoord.x+CELLSIZE,m_texCoord.y)),exaggerationFactor);neighbourAbove.z=decodeElevation(texture2D(a,vec2(m_texCoord.x,m_texCoord.y-CELLSIZE)),exaggerationFactor);if(m_texCoord.x>=1.0-CELLSIZE){neighbourRight=vec3(m_texCoord.x-CELLSIZE,1.0-m_texCoord.y,0.0);neighbourRight.z=decodeElevation(texture2D(a,vec2(m_texCoord.x-CELLSIZE,m_texCoord.y)),exaggerationFactor);}if(m_texCoord.y<=CELLSIZE){neighbourAbove=vec3(m_texCoord.x,1.0-(m_texCoord.y+CELLSIZE),0.0);neighbourAbove.z=decodeElevation(texture2D(a,vec2(m_texCoord.x,m_texCoord.y+CELLSIZE)),exaggerationFactor);}vec4 fragColor;if(k){fragColor=texture2D(h,m_texCoord);}else{float elevationRange=s-r;float colorMin=m.x/elevationRange;float colorMax=m.y/elevationRange;float relativeElevation=((absElevation/elevationRange)-colorMin)/(colorMax-colorMin);fragColor=abs(texture2D(g,vec2(0.5,relativeElevation)));if(neighbourRight.z==absElevationEx&&neighbourAbove.z==absElevationEx){if(absElevation<=0.0){fragColor=vec4(0.5058823529,0.7725490196,0.8470588235,1.0);}else if(i){fragColor=vec4(0.5058823529,0.7725490196,0.8470588235,1.0);}}}if(j){vec3 currentV=vec3(m_texCoord.x*b,(1.0-m_texCoord.y)*b,absElevationEx);neighbourRight.xy*=b;neighbourAbove.xy*=b;vec3 normal=normalize(cross(neighbourRight-currentV,neighbourAbove-currentV));if(m_texCoord.x>=1.0-CELLSIZE){normal=normalize(cross(currentV-neighbourRight,neighbourAbove-currentV));}if(m_texCoord.y<=CELLSIZE){normal=normalize(cross(currentV-neighbourRight,neighbourAbove-currentV));}float hillShade=clamp(q*1.0+max(dot(normal,normalize(n)),0.0),1.0-o,1.0);vec4 hillShadeC=vec4(hillShade,hillShade,hillShade,1.0);gl_FragColor=hillShadeC*fragColor;}else{gl_FragColor=fragColor;}if(l){float lineWidth=3.0*CELLSIZE;if(m_texCoord.x>=1.0-lineWidth){gl_FragColor=vec4(0.0,0.0,1.0,1.0);}if(m_texCoord.x<=lineWidth){gl_FragColor=vec4(1.0,0.0,0.0,1.0);}if(m_texCoord.y<=lineWidth){gl_FragColor=vec4(0.0,1.0,0.0,1.0);}if(m_texCoord.y>=1.0-lineWidth){gl_FragColor=vec4(0.0,0.5,0.5,1.0);}if(mod(m_texCoord.x,65.0*CELLSIZE)<CELLSIZE){gl_FragColor=vec4(0.9,0.9,0.9,0.1);}if(mod(m_texCoord.y,65.0*CELLSIZE)<CELLSIZE){gl_FragColor=vec4(0.9,0.9,0.9,0.1);}}}';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tiledemlayer.shader.Fragment.SOURCE = goog.DEBUG ?
    ol.renderer.webgl.tiledemlayer.shader.Fragment.DEBUG_SOURCE :
    ol.renderer.webgl.tiledemlayer.shader.Fragment.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @extends {ol.webgl.shader.Vertex}
 * @struct
 */
ol.renderer.webgl.tiledemlayer.shader.Vertex = function() {
  goog.base(this, ol.renderer.webgl.tiledemlayer.shader.Vertex.SOURCE);
};
goog.inherits(ol.renderer.webgl.tiledemlayer.shader.Vertex, ol.webgl.shader.Vertex);
goog.addSingletonGetter(ol.renderer.webgl.tiledemlayer.shader.Vertex);


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tiledemlayer.shader.Vertex.DEBUG_SOURCE = '\n// texture with encoded elevation values\nuniform sampler2D u_texture;\n\n// length of one tile in meter at equator\nuniform float u_tileSizeM;\n\n// temporary variable for coord transfer to fragment shader\nvarying vec2 v_texCoord;\n\n// decodes input data elevation value and apply exaggeration\nfloat decodeElevation(in vec4 colorChannels, in float exaggeration) {\n    float elevationM = ((colorChannels.r*255.0 + (colorChannels.g*255.0)*256.0)-11000.0)/(10.0*exaggeration);\n    return elevationM;\n}\n\n\n// vertex coordinates for tile mesh\nattribute vec2 a_position;\n\n// tile offset in current framebuffer view\nuniform vec4 u_tileOffset;\n\n// current shearing factor\nuniform vec2 u_scaleFactor;\n\nvoid main(void) { \n\n    // Orientation of coordinate system in vertex shader:\n    // y\n    // ^ \n    // |\n    // |\n    // ------>  x\n\n    // pass current vertex coordinates to fragment shader\n    v_texCoord = a_position;\n    \n    // compute y-flipped texture coordinates for further processing in fragment-shader\n    v_texCoord.y = 1.0 - v_texCoord.y;\n\n    // read and decode elevation for current vertex\n    float absElevation = decodeElevation(texture2D(u_texture, v_texCoord.xy),1.0);\n    \n    // shift vertex positions by given scale factor (dependend of the plan oblique inclination)\n    // direction of shift is always the top of the screen so it has to be adapted when the map view is rotated\n    // z value has to be inverted to get a left handed coordinate system and to make the depth test work\n    gl_Position = vec4((a_position+(absElevation * u_scaleFactor.xy) / u_tileSizeM) * u_tileOffset.xy + u_tileOffset.zw, \n                        1.0-abs(absElevation/u_tileSizeM), \n                        1.0);\n}\n\n';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tiledemlayer.shader.Vertex.OPTIMIZED_SOURCE = 'uniform sampler2D a;uniform float b;varying vec2 c;float decodeElevation(in vec4 colorChannels,in float exaggeration){float elevationM=((colorChannels.r*255.0+(colorChannels.g*255.0)*256.0)-11000.0)/(10.0*exaggeration);return elevationM;}attribute vec2 d;uniform vec4 e;uniform vec2 f;void main(void){c=d;c.y=1.0-c.y;float absElevation=decodeElevation(texture2D(a,c.xy),1.0);gl_Position=vec4((d+(absElevation*f.xy)/b)*e.xy+e.zw,1.0-abs(absElevation/b),1.0);}';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tiledemlayer.shader.Vertex.SOURCE = goog.DEBUG ?
    ol.renderer.webgl.tiledemlayer.shader.Vertex.DEBUG_SOURCE :
    ol.renderer.webgl.tiledemlayer.shader.Vertex.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
ol.renderer.webgl.tiledemlayer.shader.Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_ambient_light = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_ambient_light' : 'q');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_colorRamp = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_colorRamp' : 'g');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_colorScale = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_colorScale' : 'm');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_hillShading = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_hillShading' : 'j');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_hillShadingOpacity = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_hillShadingOpacity' : 'o');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_hsExaggeration = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_hsExaggeration' : 'p');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_light = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_light' : 'n');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_maxElevation = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_maxElevation' : 's');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_minElevation = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_minElevation' : 'r');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_overlayActive = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_overlayActive' : 'k');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_overlayTexture = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_overlayTexture' : 'h');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_scaleFactor = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_scaleFactor' : 'f');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_testing = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_testing' : 'l');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_texture = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_texture' : 'a');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_tileOffset = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_tileOffset' : 'e');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_tileSizeM = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_tileSizeM' : 'b');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_waterBodies = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_waterBodies' : 'i');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
      program, goog.DEBUG ? 'a_position' : 'd');
};
